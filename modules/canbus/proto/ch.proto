syntax = "proto2";

package apollo.canbus;

message Ultrasonic_cmd_601 {
// Control Message
  enum Vcu_probecmd_num5Type {
    VCU_PROBECMD_NUM5_OFF = 0;
    VCU_PROBECMD_NUM5_ON = 1;
  }
  enum Vcu_probecmd_num4Type {
    VCU_PROBECMD_NUM4_OFF = 0;
    VCU_PROBECMD_NUM4_ON = 1;
  }
  enum Vcu_probecmd_num3Type {
    VCU_PROBECMD_NUM3_OFF = 0;
    VCU_PROBECMD_NUM3_ON = 1;
  }
  enum Vcu_probecmd_num2Type {
    VCU_PROBECMD_NUM2_OFF = 0;
    VCU_PROBECMD_NUM2_ON = 1;
  }
  enum Vcu_probecmd_num1Type {
    VCU_PROBECMD_NUM1_OFF = 0;
    VCU_PROBECMD_NUM1_ON = 1;
  }
  enum Vcu_probecmd_num7Type {
    VCU_PROBECMD_NUM7_OFF = 0;
    VCU_PROBECMD_NUM7_ON = 1;
  }
  enum Vcu_probecmd_num6Type {
    VCU_PROBECMD_NUM6_OFF = 0;
    VCU_PROBECMD_NUM6_ON = 1;
  }
  enum Vcu_probecmd_num8Type {
    VCU_PROBECMD_NUM8_OFF = 0;
    VCU_PROBECMD_NUM8_ON = 1;
  }
  enum Vcu_probecmd_num9Type {
    VCU_PROBECMD_NUM9_OFF = 0;
    VCU_PROBECMD_NUM9_ON = 1;
  }
  enum Vcu_probecmd_num12Type {
    VCU_PROBECMD_NUM12_OFF = 0;
    VCU_PROBECMD_NUM12_ON = 1;
  }
  enum Vcu_probecmd_num11Type {
    VCU_PROBECMD_NUM11_OFF = 0;
    VCU_PROBECMD_NUM11_ON = 1;
  }
  enum Vcu_probecmd_num10Type {
    VCU_PROBECMD_NUM10_OFF = 0;
    VCU_PROBECMD_NUM10_ON = 1;
  }
  enum Vcu_distance_cmdType {
    VCU_DISTANCE_CMD_MAX_DISTANCE_CONTINUOUS_B1 = 177;
    VCU_DISTANCE_CMD_MAX_DISTANCE_TRIGGER_B2 = 178;
    VCU_DISTANCE_CMD_LONG_DISTANCE_CONTINUOUS_B3 = 179;
    VCU_DISTANCE_CMD_LONG_DISTANCE_TRIGGER_B4 = 180;
    VCU_DISTANCE_CMD_GENERAL_DISTANCE_CONTINUOUS_B5 = 181;
    VCU_DISTANCE_CMD_GENERAL_DISTANCE_TRIGGER_B6 = 182;
    VCU_DISTANCE_CMD_CLOSE_DISTANCE_CONTINUOUS_B7 = 183;
    VCU_DISTANCE_CMD_CLOSE_DISTANCE_TRIGGER_B8 = 184;
    VCU_DISTANCE_CMD_MIN_DISTANCE_CONTINUOUS_B9 = 185;
    VCU_DISTANCE_CMD_MIN_DISTANCE_TRIGGER_BA = 186;
    VCU_DISTANCE_CMD_RAINDAY_DISTANCE_CONTINUOUS_BB = 187;
    VCU_DISTANCE_CMD_RAINDAY_DISTANCE_TRIGGER_BC = 188;
  }
  // [] [0|1]
  optional Vcu_probecmd_num5Type vcu_probecmd_num5 = 1;
  // [] [0|1]
  optional Vcu_probecmd_num4Type vcu_probecmd_num4 = 2;
  // [] [0|1]
  optional Vcu_probecmd_num3Type vcu_probecmd_num3 = 3;
  // [] [0|1]
  optional Vcu_probecmd_num2Type vcu_probecmd_num2 = 4;
  // [] [0|1]
  optional Vcu_probecmd_num1Type vcu_probecmd_num1 = 5;
  // [] [0|1]
  optional Vcu_probecmd_num7Type vcu_probecmd_num7 = 6;
  // [] [0|1]
  optional Vcu_probecmd_num6Type vcu_probecmd_num6 = 7;
  // [] [0|1]
  optional Vcu_probecmd_num8Type vcu_probecmd_num8 = 8;
  // [] [0|1]
  optional Vcu_probecmd_num9Type vcu_probecmd_num9 = 9;
  // [] [0|1]
  optional Vcu_probecmd_num12Type vcu_probecmd_num12 = 10;
  // [] [0|1]
  optional Vcu_probecmd_num11Type vcu_probecmd_num11 = 11;
  // [] [0|1]
  optional Vcu_probecmd_num10Type vcu_probecmd_num10 = 12;
  // [] [0|15]
  optional int32 vcu_machine_num = 13;
  // [] [0|255]
  optional Vcu_distance_cmdType vcu_distance_cmd = 14;

  optional int32 vcu_ultrasonic_data_8 = 15;

}

message Ultrasonic2_612 {
// Report Message
  // Ultrasonic8 detection distance [mm] [0|65535]
  optional int32 ult_probe_info8 = 1;
  // Ultrasonic7 detection distance [mm] [0|65535]
  optional int32 ult_probe_info7 = 2;
  // Ultrasonic6 detection distance [mm] [0|65535]
  optional int32 ult_probe_info6 = 3;
  // Ultrasonic5 detection distance [mm] [0|65535]
  optional int32 ult_probe_info5 = 4;
}

message Ultrasonic1_611 {
// Report Message
  // Ultrasonic4 detection distance [mm] [0|65535]
  optional int32 ult_probe_info4 = 1;
  // Ultrasonic3 detection distance [mm] [0|65535]
  optional int32 ult_probe_info3 = 2;
  // Ultrasonic2 detection distance [mm] [0|65535]
  optional int32 ult_probe_info2 = 3;
  // Ultrasonic1 detection distance [mm] [0|65535]
  optional int32 ult_probe_info1 = 4;
}

message Control_command_115 {
// Control Message
  enum Ctrl_cmdType {
    CTRL_CMD_OUT_OF_CONTROL = 0;
    CTRL_CMD_UNDER_CONTROL = 1;
  }
  // Take control(Command) [] [0|1]
  optional Ctrl_cmdType ctrl_cmd = 1;
}

message Gear_command_114 {
// Control Message
  enum Gear_cmdType {
    GEAR_CMD_PARK = 1;
    GEAR_CMD_REVERSE = 2;
    GEAR_CMD_NEUTRAL = 3;
    GEAR_CMD_DRIVE = 4;
  }
  // PRND control(Command) [] [1|4]
  optional Gear_cmdType gear_cmd = 1;
}

message Brake_command_111 {
// Control Message
  enum Brake_pedal_en_ctrlType {
    BRAKE_PEDAL_EN_CTRL_DISABLE = 0;
    BRAKE_PEDAL_EN_CTRL_ENABLE = 1;
  }
  // brake pedal enable bit(Command) [] [0|1]
  optional Brake_pedal_en_ctrlType brake_pedal_en_ctrl = 1;
  // Percentage of brake pedal(Command) [%] [0|100]
  optional int32 brake_pedal_cmd = 2;
}

message Throttle_command_110 {
// Control Message
  enum Throttle_pedal_en_ctrlType {
    THROTTLE_PEDAL_EN_CTRL_DISABLE = 0;
    THROTTLE_PEDAL_EN_CTRL_ENABLE = 1;
  }
  // throttle pedal enable bit(Command) [] [0|1]
  optional Throttle_pedal_en_ctrlType throttle_pedal_en_ctrl = 1;
  // Percentage of throttle pedal(Command) [%] [0|100]
  optional int32 throttle_pedal_cmd = 2;
}

message Turnsignal_command_113 {
// Control Message
  enum Turn_signal_cmdType {
    TURN_SIGNAL_CMD_NONE = 0;
    TURN_SIGNAL_CMD_LEFT = 1;
    TURN_SIGNAL_CMD_RIGHT = 2;
  }
  // Lighting control(Command) [] [0|2]
  optional Turn_signal_cmdType turn_signal_cmd = 1;
}

message Steer_command_112 {
// Control Message
  enum Steer_angle_en_ctrlType {
    STEER_ANGLE_EN_CTRL_DISABLE = 0;
    STEER_ANGLE_EN_CTRL_ENABLE = 1;
  }
  // steering angle enable bit(Command) [] [0|1]
  optional Steer_angle_en_ctrlType steer_angle_en_ctrl = 1;
  // Current steering angle(Command) [radian] [-0.524|0.524]
  optional double steer_angle_cmd = 2;
}

message Brake_status__511 {
// Report Message
  enum Brake_pedal_en_stsType {
    BRAKE_PEDAL_EN_STS_DISABLE = 0;
    BRAKE_PEDAL_EN_STS_ENABLE = 1;
    BRAKE_PEDAL_EN_STS_TAKEOVER = 2;
  }
  enum Brake_errType {
    BRAKE_ERR_NOERR = 0;
    BRAKE_ERR_BRAKE_SYSTEM_ERR = 1;
  }
  enum Emergency_btn_envType {
    EMERGENCY_BTN_ENV_NOENV = 0;
    EMERGENCY_BTN_ENV_EMERGENCY_BUTTON_ENV = 1;
  }
  enum Front_bump_envType {
    FRONT_BUMP_ENV_NOENV = 0;
    FRONT_BUMP_ENV_FRONT_BUMPER_ENV = 1;
  }
  enum Back_bump_envType {
    BACK_BUMP_ENV_NOENV = 0;
    BACK_BUMP_ENV_BACK_BUMPER_ENV = 1;
  }
  enum Overspd_envType {
    OVERSPD_ENV_NOENV = 0;
    OVERSPD_ENV_OVERSPEED_ENV = 1;
  }
  // brake pedal enable bit(Status) [] [0|3]
  optional Brake_pedal_en_stsType brake_pedal_en_sts = 1;
  // Percentage of brake pedal(Status) [%] [0|100]
  optional int32 brake_pedal_sts = 2;
  // [] [0|1]
  optional Brake_errType brake_err = 3;
  // [] [0|1]
  optional Emergency_btn_envType emergency_btn_env = 4;
  // [] [0|1]
  optional Front_bump_envType front_bump_env = 5;
  // [] [0|1]
  optional Back_bump_envType back_bump_env = 6;
  // [] [0|1]
  optional Overspd_envType overspd_env = 7;
}

message Throttle_status__510 {
// Report Message
  enum Throttle_pedal_en_stsType {
    THROTTLE_PEDAL_EN_STS_DISABLE = 0;
    THROTTLE_PEDAL_EN_STS_ENABLE = 1;
    THROTTLE_PEDAL_EN_STS_TAKEOVER = 2;
  }
  enum Drive_motor_errType {
    DRIVE_MOTOR_ERR_NOERR = 0;
    DRIVE_MOTOR_ERR_DRV_MOTOR_ERR = 1;
  }
  enum Battery_bms_errType {
    BATTERY_BMS_ERR_NOERR = 0;
    BATTERY_BMS_ERR_BATTERY_ERR = 1;
  }
  // throttle pedal enable bit(Status) [] [0|2]
  optional Throttle_pedal_en_stsType throttle_pedal_en_sts = 1;
  // Percentage of throttle pedal(Status) [%] [0|100]
  optional int32 throttle_pedal_sts = 2;
  // [] [0|1]
  optional Drive_motor_errType drive_motor_err = 3;
  // [] [0|1]
  optional Battery_bms_errType battery_bms_err = 4;
}

message Turnsignal_status__513 {
// Report Message
  enum Turn_signal_stsType {
    TURN_SIGNAL_STS_NONE = 0;
    TURN_SIGNAL_STS_LEFT = 1;
    TURN_SIGNAL_STS_RIGHT = 2;
  }
  // Lighting control(Status) [] [0|2]
  optional Turn_signal_stsType turn_signal_sts = 1;
}

message Steer_status__512 {
// Report Message
  enum Steer_angle_en_stsType {
    STEER_ANGLE_EN_STS_DISABLE = 0;
    STEER_ANGLE_EN_STS_ENABLE = 1;
    STEER_ANGLE_EN_STS_TAKEOVER = 2;
  }
  enum Steer_errType {
    STEER_ERR_NOERR = 0;
    STEER_ERR_STEER_MOTOR_ERR = 1;
  }
  enum Sensor_errType {
    SENSOR_ERR_NOERR = 0;
    SENSOR_ERR_STEER_SENSOR_ERR = 1;
  }
  // steering angle enable bit(Status) [] [0|2]
  optional Steer_angle_en_stsType steer_angle_en_sts = 1;
  // Current steering angle(Status) [radian] [-0.524|0.524]
  optional double steer_angle_sts = 2;
  // [] [0|1]
  optional Steer_errType steer_err = 3;
  // [] [0|1]
  optional Sensor_errType sensor_err = 4;
}

message Ecu_status_1_515 {
// Report Message
  enum Ctrl_stsType {
    CTRL_STS_OUT_OF_CONTROL = 0;
    CTRL_STS_UNDER_CONTROL = 1;
  }
  // Current speed (Steering status) [m/s] [0|0]
  optional double speed = 1;
  // Current acceleration (Steering status) [m/s^2] [0|0]
  optional double acc_speed = 2;
  // Current Auto-mode state (Chassis status) [] [0|1]
  optional Ctrl_stsType ctrl_sts = 3;
  // Current chassis state (Chassis status) [] [0|255]
  optional int32 chassis_sts = 4;
  // Chassis error code (Chassis status) [] [0|65535]
  optional int32 chassis_err = 5;
}

message Gear_status_514 {
// Report Message
  enum Gear_stsType {
    GEAR_STS_PARK = 1;
    GEAR_STS_REVERSE = 2;
    GEAR_STS_NEUTRAL = 3;
    GEAR_STS_DRIVE = 4;
  }
  // PRND control(Status) [] [1|4]
  optional Gear_stsType gear_sts = 1;
}

message Ecu_status_3_517 {
// Report Message
  // Ultrasonic detection distance 1 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_1 = 1;
  // Ultrasonic detection distance 2 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_2 = 2;
  // Ultrasonic detection distance 3 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_3 = 3;
  // Ultrasonic detection distance 4 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_4 = 4;
  // Ultrasonic detection distance 5 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_5 = 5;
  // Ultrasonic detection distance 6 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_6 = 6;
  // Ultrasonic detection distance 7 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_7 = 7;
  // Ultrasonic detection distance 8 (Ultrasound status) [cm] [0|500]
  optional double ultrasound_dist_8 = 8;
}

message Ecu_status_2_516 {
// Report Message
  // Percentage of battery remaining (BMS status) [%] [0|100]
  optional int32 battery_remaining_capacity = 1;
  // Current battery voltage (BMS status) [V] [0|80]
  optional double battery_voltage = 2;
  // Current battery current (BMS status) [A] [-60|60]
  optional double battery_current = 3;
  // Current battery temperature (BMS status) [¡É] [-40|110]
  optional int32 battery_temperature = 4;
}

message Ch {
  optional Ultrasonic_cmd_601 ultrasonic_cmd_601 = 1; // control message
  optional Ultrasonic2_612 ultrasonic2_612 = 2; // report message
  optional Ultrasonic1_611 ultrasonic1_611 = 3; // report message
  optional Control_command_115 control_command_115 = 4; // control message
  optional Gear_command_114 gear_command_114 = 5; // control message
  optional Brake_command_111 brake_command_111 = 6; // control message
  optional Throttle_command_110 throttle_command_110 = 7; // control message
  optional Turnsignal_command_113 turnsignal_command_113 = 8; // control message
  optional Steer_command_112 steer_command_112 = 9; // control message
  optional Brake_status__511 brake_status__511 = 10; // report message
  optional Throttle_status__510 throttle_status__510 = 11; // report message
  optional Turnsignal_status__513 turnsignal_status__513 = 12; // report message
  optional Steer_status__512 steer_status__512 = 13; // report message
  optional Ecu_status_1_515 ecu_status_1_515 = 14; // report message
  optional Gear_status_514 gear_status_514 = 15; // report message
  optional Ecu_status_3_517 ecu_status_3_517 = 16; // report message
  optional Ecu_status_2_516 ecu_status_2_516 = 17; // report message
}
